//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.17 at 05:46:49 PM CET 
//


package pandadomain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice>
 *         &lt;element ref="{}atomic"/>
 *         &lt;element ref="{}not"/>
 *         &lt;element ref="{}and"/>
 *         &lt;element ref="{}or"/>
 *         &lt;element ref="{}imply"/>
 *         &lt;element ref="{}forall"/>
 *         &lt;element ref="{}exists"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "atomic",
    "not",
    "and",
    "or",
    "imply",
    "forall",
    "exists"
})
@XmlRootElement(name = "not")
public class Not {

    protected Atomic atomic;
    protected Not not;
    protected And and;
    protected Or or;
    protected Imply imply;
    protected Forall forall;
    protected Exists exists;

    /**
     * Gets the value of the atomic property.
     * 
     * @return
     *     possible object is
     *     {@link Atomic }
     *     
     */
    public Atomic getAtomic() {
        return atomic;
    }

    /**
     * Sets the value of the atomic property.
     * 
     * @param value
     *     allowed object is
     *     {@link Atomic }
     *     
     */
    public void setAtomic(Atomic value) {
        this.atomic = value;
    }

    /**
     * Gets the value of the not property.
     * 
     * @return
     *     possible object is
     *     {@link Not }
     *     
     */
    public Not getNot() {
        return not;
    }

    /**
     * Sets the value of the not property.
     * 
     * @param value
     *     allowed object is
     *     {@link Not }
     *     
     */
    public void setNot(Not value) {
        this.not = value;
    }

    /**
     * Gets the value of the and property.
     * 
     * @return
     *     possible object is
     *     {@link And }
     *     
     */
    public And getAnd() {
        return and;
    }

    /**
     * Sets the value of the and property.
     * 
     * @param value
     *     allowed object is
     *     {@link And }
     *     
     */
    public void setAnd(And value) {
        this.and = value;
    }

    /**
     * Gets the value of the or property.
     * 
     * @return
     *     possible object is
     *     {@link Or }
     *     
     */
    public Or getOr() {
        return or;
    }

    /**
     * Sets the value of the or property.
     * 
     * @param value
     *     allowed object is
     *     {@link Or }
     *     
     */
    public void setOr(Or value) {
        this.or = value;
    }

    /**
     * Gets the value of the imply property.
     * 
     * @return
     *     possible object is
     *     {@link Imply }
     *     
     */
    public Imply getImply() {
        return imply;
    }

    /**
     * Sets the value of the imply property.
     * 
     * @param value
     *     allowed object is
     *     {@link Imply }
     *     
     */
    public void setImply(Imply value) {
        this.imply = value;
    }

    /**
     * Gets the value of the forall property.
     * 
     * @return
     *     possible object is
     *     {@link Forall }
     *     
     */
    public Forall getForall() {
        return forall;
    }

    /**
     * Sets the value of the forall property.
     * 
     * @param value
     *     allowed object is
     *     {@link Forall }
     *     
     */
    public void setForall(Forall value) {
        this.forall = value;
    }

    /**
     * Gets the value of the exists property.
     * 
     * @return
     *     possible object is
     *     {@link Exists }
     *     
     */
    public Exists getExists() {
        return exists;
    }

    /**
     * Sets the value of the exists property.
     * 
     * @param value
     *     allowed object is
     *     {@link Exists }
     *     
     */
    public void setExists(Exists value) {
        this.exists = value;
    }

}
